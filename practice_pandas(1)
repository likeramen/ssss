import pandas as pd

data = [[1,2,3], [4,5,6]]
df = pd.DataFrame(data=data, index=['x','y'], columns=['a','b','c'])        #컬럼 생성
print(df)

df = pd.DataFrame(data)                                                     # 컬럼 생성 안하면 그냥 컬럼이 숫자로 됨.
print(df)


data = [1,2,3]
df = pd.DataFrame(data, index=['x','y','z'], columns=['a'])                 # 1차원
print(df)

data = {'name' : ['a','b','c'], 'age':[33,30,31]}                           # 딕셔너리로도 사용 가능
df = pd.DataFrame(data)
print(df)

name = ['a','b','c']
age = [33,30,31]
data = list(zip(name,age))                                                  # 이렇게 zip으로 묶어도 됨.
df = pd.DataFrame(data, index=['x','y','z'], columns=['name','age'])
print(df)

data = [[1,2,3], [4,5,6]]
df = pd.DataFrame(data)
df.index = ['x','y']

df = pd.DataFrame(data, index=['x','y'], columns=['a','b','c'])
print(df.ftypes)

df = pd.DataFrame(data, index=['x','y'], columns=['a','b','c'])
print(df.shape)                                                             # 행열 개수

print(df.ndim)                                                              # 차원 계산

data = [[1,2,3], [4,5,6]]
df1 = pd.DataFrame(data, index=['x','y'], columns=['a','b','c'])
data2 = [[10,20,30], [40,50,60]]
df2 = pd.DataFrame(data2, index=['x','y'], columns=['a','b','c'])
print(df1.add(df2))                                                         # 두개의 데이터 더하기
print(df1.sub(df2))                                                         # 두개의 데이터 빼기
print(df1.mul(df2))                                                         # 두개의 데이터 곱하기
print(df1.div(df2))                                                         # 두개의 데이터 나누기
print(df1.floordiv(df2))                                                    # 두개의 데이터 나눈 후 몫
print(df1.mod(df2))                                                         # 이거는 나머지
print(df1.pow(df2))                                                         # 거듭제곱

call = df * -1
print(call.abs())                                                           # 절대값
print(df1.divide(df2, fill_value=0.0))                                      # 나누기 하여 결과 반환


data = [1,2,3,4]
se = pd.Series(data, index=['a','b','c','d'])
print(se[0])
print(se['a'])                                                              # 데이터 검색 인덱스 위치로도 찾을 수 있고 컬럼명으로도 찾을 수 있음.

print(se[0 : 1])
print(se['a' : 'b'])                                                        # 이것은 슬라이싱

print(se[[3,2,1]])
print(se[['d','a','c']])                                                    # 리스트 요소 검색

se = pd.Series(data)
print(se[se < 3])                                                           # 논리식으로 조건 검색

data = {'a' : 1, 'b' : 2, 'c' : 3}
se = pd.Series(data)
print(se['b'])                                                              # 딕셔너리로 검색함.

del se['a']
print(se)                                                                   # 행 삭제

#데이터 프레임 시작

data = [[1,2,3], [4,5,6]]
df = pd.DataFrame(data, index=['x','y'], columns=['a','b','c'])
print(df['a'])                                                              # 데이터 프레임자료형

print(df[1:2])                                                              # 데이터 프레임 슬라이싱

print(df[df < 6])                                                           # 논리식 검색






import pandas as pd
import sqlite3
# from IPython.core.display import display, HTML
# display(HTML("<style>.container { width : 100% ! important; }</style>"))

csv_data = pd.read_csv("book_list.csv")
print(type(csv_data))
print(csv_data)

# excel_data = pd.read_excel("heroes.xlsx")
# print(type(excel_data))
# print(excel_data)
#
# conn = sqlite3.connect("db.sqlite")
# sql = "select * from books"
# sql_data = pd.read_sql(sql, con = conn)
# print(type(sql_data))
# print(sql_data)

data = [[1,2,3], [4,5,6]]
df = pd.DataFrame(data, index=['x','y'], columns=['a','b','c'])
print(pd.concat([df, df]))
print(pd.concat([df, df], axis=1))

data1 = [[1,2,3], [4,5,6]]
df1 = pd.DataFrame(data1, index=['x','y'], columns=['a','b','c'])
data2 = [[1,2,3], [4,5,6]]
df2 = pd.DataFrame(data2, index=['x','y'], columns=['a','b','c'])
print(pd.concat([df1, df2]))
print(pd.concat([df1, df2], axis=1))

data = [4,3,5]
se = pd.Series(data, index=['x','y','z'])
print(se.sort_values())

se = pd.Series(data, index=['x','y','z'])
se.sort_values(inplace=True)
print(se)
se.index = [0,1,2]                                                  # 인덱스 변경
print(se)

data = {'b' : [4,7,-5,2], 'a':[0,1,0,1]}
df = pd.DataFrame(data)
print(df.sort_values(by='a'))

df.sort_values(by='a', inplace=True)
print(df)

data = {'a' : 1, 'b' : 2, 'c' : 3}
se = pd.Series(data)
print(se.get('c'))

data = { 'name' : ['홍길동', '전우치'], 'age' : [33, 30]}
df = pd.DataFrame(data)
print(df.get('name'))

data = {'b':[4,7,-5,2,5,1,2], 'a':[0,1,0,1,2,1,1]}
df = pd.DataFrame(data)
print(df.head(3))                                               # 앞에서 3번째까지만 출력

print(df.tail(3))                                               # 뒤에서 3번째까지만 출력

data = [1,2,3,4]
se = pd.Series(data)
print(se.count())

data = [[1,2,3], [4,5,6]]
df = pd.DataFrame(data, index=['x','y'], columns=['a','b','c'])
print(df.count())

data = [4,3,4,4,3,5]
se = pd.Series(data)
print(se.value_counts())

data = {'a':1, 'b':2, 'c':3}
se = pd.Series(data)
print(se.keys())

data = {'name' : ['홍길동','전우치','임꺽정'], 'age' : [33,30,31]}
df = pd.DataFrame(data)
print(df.keys())

data = [1,1,2,2,1,1,3,1,4,1]
se = pd.Series(data)
print(se.unique())                                          # 중복 제거 출력
print(se.nunique())                                         # 중복 제거 후 갯수 출력



import pandas as pd
import numpy as np

data = {'a' : [5,2,5,7,7,3,7], 'b':[176,180,172,170,182,186,166]}
df = pd.DataFrame(data)
print('행의 누적합\n', df.cumsum(axis = 1))
df = df['b']
print('열의 누적합\n', df.cumsum())
df = pd.DataFrame(data)
print('행의 누적곱\n', df.cumprod(axis = 1))
df = df['b']
print('열의 누적곱\n', df.cumprod())

df = pd.DataFrame(data)
print('행의 누적 최소값\n', df.cummin(axis = 1))
df = df['b']
print('행의 누적 최소값 \n', df.cummin())

df = pd.DataFrame(data)
print('행의 누적 최대값\n', df.cummax(axis = 1))
df = df['b']
print('행의 누적 최대값 \n', df.cummax())

df = pd.DataFrame(np.arange(20).reshape(4,5), index=['a','b','c','d'], columns=['f','g','h','i','j'])
df = df['f']
print('컬럼 평균 : ', df.mean())

df1 = pd.DataFrame(np.arange(20).reshape(4,5), index=['a','b','c','d'], columns=['f','g','h','i','j'])
df1 = df1['f']
print('열의 중위값 : ', df1.median())
df2 = pd.DataFrame(np.arange(20).reshape(4,5), index=['a','b','c','d'], columns=['f','g','h','i','j'])
print('행의 중위값 : ', df2.median())

data = {'a' : [5,2,5,7,7,3,7], 'b':[176,180,172,170,182,186,166]}
df = pd.DataFrame(data)
df = df['a']
print('열의 최빈값\n', df.mode())

df = pd.DataFrame(data)
df1 = df['b']
df2  = df1.mean()
df['c'] = df2
df['c'] = df['c'].astype('int64')
df3 = df['b'] - df['c']
df4 = (pow(df3, 2))
print(df4.mean())
print(df4.sum()/6)
print(df1.var())



import os
os.chdir('C:/deep/pandas/survey')

import matplotlib.font_manager
font_name = matplotlib.font_manager.FontProperties(fname="C:/Windows/Fonts/malgun.ttf").get_name()

import pandas as pd
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.offline as office
import plotly.graph_objs as go


pd.set_option('display.max_columns',500)
pd.set_option('display.width',1000)


print('1. 특정나라선정')
mcq = pd.read_csv('multipleChoiceResponses.csv', encoding='ISO-8859-1', low_memory=False)
Country_select = mcq[mcq['Country']=='Poland']
# print(Country_select)
one = sns.countplot(y='Country',data=Country_select)
# C:\deep\pandas\survey\data_image 이미지 폴더
plt.savefig("C:/deep/pandas/survey/data_image/1.jpg")
plt.show()
print('\n')

print('2. 응답자의 응답수')
response_count = Country_select['Country'].value_counts()
print(response_count)
sns.countplot(y='Country',data=Country_select)
# C:\deep\pandas\survey\data_image 이미지 폴더
plt.savefig("C:/deep/pandas/survey/data_image/2.jpg")
plt.show()
print('\n')

print('3. 나이분석')
response_Age = Country_select[Country_select['Age'] > 0]['Age']
print(response_Age)
sns.countplot(y='Age',data=Country_select)
# C:\deep\pandas\survey\data_image 이미지 폴더
plt.savefig("C:/deep/pandas/survey/data_image/3.jpg")
plt.show()
print('\n')

print('4. 응답자의 성별 분석')
response_gender = Country_select['GenderSelect'].value_counts()
print(response_gender)
sns.countplot(y='GenderSelect',data=Country_select)
# C:\deep\pandas\survey\data_image 이미지 폴더
plt.savefig("C:/deep/pandas/survey/data_image/4.jpg")
plt.show()
print('\n')

print('5. 응답자의 취업여부 분석')
response_status = Country_select['EmploymentStatus'].value_counts()
print(response_status)
sns.countplot(y='EmploymentStatus',data=Country_select)
# C:\deep\pandas\survey\data_image 이미지 폴더
plt.savefig("C:/deep/pandas/survey/data_image/5.jpg")
plt.show()
print('\n')


print('6. 응답자의 프로그래밍 언어 선호 성향 분석')
response_programlang = Country_select['LanguageRecommendationSelect'].value_counts()
print(response_programlang)
sns.countplot(y='LanguageRecommendationSelect',data=Country_select)
# C:\deep\pandas\survey\data_image 이미지 폴더
plt.savefig("C:/deep/pandas/survey/data_image/6.jpg")
plt.show()
print('\n')







